Databases and SQL for Data Science with Python

1. Basic SQL
    1.1 Learning purpose
        - Basics of SQL, Relational Database Model
        - SQL, data, database, relational database
    1.2 Basic terms
        1.2.1 SQL (Structured Query Language): A language used for relational databses
        1.2.2 data: Facts (words, numbers), Pictures
        1.2.3 database: A repository of data, Provides the functionality for adding, modifying and querying that data
        1.2.4 Relational Databse: Data stored in tabular form (columns and rows)
        1.2.5 Database: repository of data
        1.2.6 DBMS (Database Management System): software to manage databases
        1.2.7 RDBMS (Relational database management system): A set of software tools that controls the data (access, organization, and storage)
     1.3 Basic SQL commands
         - Create a table, Insert, Select, Update, Delete
         1.3.1 SELECT
             - The general syntax of SELECT statments is: select COLUMN1, COLUMN2, ... from TABLE1 ;
             - To retrieve all columns from the COUNTRY table we could use "*" instead of specifying individual column names: select * from COUNTRY ;
             - The WHERE clause can be added to your query to filter results or get specific rows of data. 
             - To retrieve data for all rows in the COUNTRY table where the ID is less than 5: select * from COUNTRY where ID < 5 ;
             - In case of character based columns the values of the predicates in the where clause need to be enclosed in single quotes. 
             - To retrieve the data for the country with country code "CA" we would issue: select * from COUNTRY where CCODE = 'CA';
            1.3.1.1 Select statement with COUNT
                - COUNT() is a built-in function that retrieves the number of rows matching the query criteria
                - ex. select COUNT(*) from tablename
                - ex. select COUNT(COUNTRY) from MEDALS where COUNTRY='CANADA'
            1.3.1.2 Select statement with DISTINCT
                - DISTINCT is used to remove duplicate values from a result set
                - ex. select DISTINCT columnname from tablename
                - ex. select DISTINCT COUNTRY from MEDALS where MEDALTYPE = 'GOLD'
            1.3.1.3 Select statement with LIMIT
                - LIMIT is used for restricting the number of rows retrieved from the database
                - ex. select * from tablename LIMIT 10
                - ex. select * from MEDALS where YEAR = 2018 LIMIT 5
         1.3.2 INSERT
             - A Data Manipulation Language (DML) statement used to read and modify data
             - The general syntax of INSERT statement is: INSERT INTO [TableName] <([ColumnName], ...)> VALUES ([Value], ...)
             - ex. INSERT INTO AUTHOR (AUTHOR_ID, LASTNAME, FIRSTNAME, EMAIL, CITY, COUNTRY) VALUES ('A1', 'Chong', 'Raul', 'rfc@ibm.com', 'Toronto', 'CA')
         1.3.3 UPDATE
             - A Data Manipulation Language (DML) statement used to read and modify data
             - The general syntax of UPDATE statement is: UPDATE [TableName] SET [[ColumnName]=[Value]] <WHERE [Condition]>
             - ex. UPDATE AUTHOR SET LASTNAME='KATTA' FIRSTNAME='LAKSHMI' WHERE AUTHOR_ID='A2'
         1.3.4 DELETE
             - A Data Manipulation Language (DML) statement used to read and modify data
             - The general syntax of DELETE statement is: DELETE [TableName] SET [[ColumnName]=[Value]] <WHERE [Condition]>
             - ex. DELETE FROM AUTHOR WHERE AUTHOR_ID IN ('A2','A3')

2. Relational Database Concepts
    2.1 What is relational database
        - Relational database is tables consisting of entities
        - Entities are independent objects which have attributes
        - The key advantage of the relational model is data independence
    2.2 Databse instance on Cloud
        2.2.1 Characteristics of Cloud databses
            - Eaas of Use and Access, ex. API, Web Interface, Cloud or Remote Application
            - Scalability & Economic, Diaster Recovery
        2.2.2 Examples of Cloud databases
            - IBM Db2, Databases for PostgreSQL, Oracle Database Cloud Service, Microsoft Azure SQL Database, Amazon Relational Database Services (RDS)
        2.2.3 Database service instances
            - DBaaS (Database-as-a-Service) provides users with access to Database resources in cloud without setting up hardware and installing software
            - Database service instance holds data in data objects/tables
            - Once data is loaded, it can be queried using web interfaces and applications
    2.3 Tpyes for SQL statements (DDL vs DML)
        2.3.1 DDL (Data Definition Langugae) statements
            - Define, change, or drop data, ex. CREATE, ALTER, TRUNCATE, DROP
        2.3.2 DML (Data Manipulation Language) statements:
            - Read and modify data, CRUD operations (Create, Read, Update, Delete rows)
            - Common DML, ex. INSERT, SELECT, UPDATE, DELETE

3. Using String Patterns and Ranges
    3.1 Retrieving rows
        - select * from table_name (Retrieve all rows of the table)
        3.1.1 Using Strings: select column_name from table_name where condition 
            - the WHERE clause to refine your query results
            - ex. select book_id, title from Book WHERE book_id='B1'
            - the wildcard character (%) as a substitute for unknown characters in a pattern
            - ex. select firstname from Author WHERE firstname like 'R%'
        3.1.2 Using Ranges: select column_name from table_name where condition
            - ex. select title, pages from Book WHERE pages >= 290 AND pages <= 300
            - BETWEEN ... AND ... to specify a range of numbers
            - ex. select title, pages from Book WHERE pages between 290 and <= 300
        3.1.3 Using Set of values: select column_name from table_name where condition
            - ex. select firstname, lastname, country from Author WHERE country='AU' OR country='BR'
            - ex. select firstname, lastname, country from Author WHERE country IN ('AU', 'BR')
    3.2 Sorting Results Sets
        - sort query results into ascending or descending order, using the ORDER BY clause to specify the column to sort on
        3.2.1 Ascending order (default): select column_name from table_name ORDER BY column_name
            - ex. select title from Book ORDER BY title
        3.2.2 Descending order: select column_name from table_name ORDER BY column_name DESC
            - ex. select title from Book ORDER BY title DESC
        3.2.3 Order by column number: select column_name from table_name ORDER BY column_number
            - ex. select title from Book ORDER BY 2
    3.3 Grouping Result Sets
        3.3.1 Eliminating duplicates: select distinct(column_name) from table_name
            - ex. select distinct(country) from Author
        3.3.2 Eliminate duplicates and count: select column_name count(column_name) as Count from table_name GROUP BY column_name
            - group query results by using the GROUP BY clause
            - count() is function, as Count is a column name for count() result
            - ex. select country, count(country) as Count from Author group by country
        3.3.3 +Having clause: select column_name count(column_name) as Count from table_name group by column_name having count(column_name) > count_number
            - ex. select country, count(country) as Count from Author group by country having count(country) > 4
    3.4 Functions, Sub-queries, and Multiple Tables
        3.4.1 Built-in Functions
            3.4.1.1 Aggregate or Column functions
                3.4.1.1.1 SUM: select SUM(column_name) as print_column_name from table_name
                    - ex. select SUM(COST) as SUM_OF_COST from PETRESCUE
                3.4.1.1.2 MAX: select MAX(column_name) as print_column_name from table_name
                    - ex. select MAX(QUANTITY) as MAX_OF_QUANTITY from PETRESCUE
                3.4.1.1.3 MIN: select MIN(column_name) as print_column_name from table_name
                    - ex. select MIN(ID) as MIN_OF_ID from PETRESCUE where ANIMAL = 'Dog'
                3.4.1.1.4 AVG: select AVG(column_name) as print_column_name from table_name
                    - ex. select AVG(COST) as AVG_OF_COST from PETRESCUE
                    - ex. select AVG(COST / QUANTITY) as AVG_OF_COST_dby_QUANTITY from PETRESCUE where ANIMAL = 'Dog'
            3.4.1.2 Scalar and String functions
                3.4.1.2.1 Round: select ROUND(column_name) as print_column_name from table_name
                    - ex. select ROUND(COST) from PETRESCUE
                3.4.1.2.2 LENGTH: select LENGTH(column_name) as print_column_name from table_name
                    - ex. select LENGTH(COST) from PETRESCUE
                3.4.1.2.3 UCASE: select UCASE(column_name) as print_column_name from table_name
                    - ex. select UCASE(ANIMAL) from PETRESCUE
                    - ex. select DISTINCT(UCASE(ANIMAL)) as ANIMAL from PETRESCUE
                3.4.1.2.4 LCASE: select LCASE(column_name) as print_column_name from table_name
                    - ex. select * from PETRESCUE where LCASE(ANIMAL) = 'cat'
            3.4.1.3 Date and Time Built-in functions
                3.4.1.3.1 DAY: select DAY(column_name) from table_name
                    - ex. select DAY(RESCUEDATE) from PETRESCUE where ANIMAL='Cat'
                3.4.1.3.2 MONTH: select MONTH(column_name) from table_name
                    - ex. select COUNT(*) from PETRESCUE where MONTH(RESCUEDATE)='05'
                3.4.1.3.3 Arithmetic: select (column_name + n DAYS) from table_name
                    - ex. select (RESCUEDATE + 3 DAYS) from PETRESCUE
                    - ex. select (CURRENT_DATE - RESCUEDATE) from PETRESCUE
        3.4.2 Sub-Queries and Nested Selects
            3.4.2.1 Sub-queries with aggregate functions: select column_name1, column_name2 from table_name where column_name2 < (select AVG(column_name2) from table_name)
                - ex. select EMP_ID, F_NAME, L_NAME, SALARY from employees where SALARY < (select AVG(SALARY) from employees)
            3.4.2.2 Sub-queries in list of columns: select column_name1, column_name2, (select AVG(column_name) from table) as print_column_name from table_name
                - ex. select EMP_ID, SALARY, (select AVG(SALARY) from employees) as AVG_SALARY from employees
            3.4.2.3 Sub-queries in FROM clause: select * from (select column_name1, column_name2, column_name3 from table_name) as print_column_name
                - ex. select * from (select EMP_ID, F_NAME, L_NAME, DEP_ID from employees) as EMP4ALL
        3.4.3 Woring with Multiple Tables
            3.4.3.1 Multiple tables with Sub-queries: select * from table_name1 where column_name1 IN (select column_name2 from table_name2)
                - ex. select * from employees where DEP_ID IN (select DEPT_ID_DEP from departments)
                - ex. select * from employees where DEP_ID IN (select DEPT_ID_DEP from departments where LOC_ID = 'L0002')
                - ex. select DEPT_ID_DEP, DEP_NAME from departments where DEPT_ID_DEP IN (select DEP_ID from employees where SALARY > 70000)
            3.4.3.1 Multiple tables with Implicit Join: select * from table_name1, table_name2
                - ex. select * from employees, departments
                - ex. select * from employees, departments where employees.DEP_ID = departments.DEPT_ID_DEP
                - ex. select * from employees E, department D where E.DEP_ID = D.DEPT_ID_DEP
                - ex. select EMP_ID, DEP_NAME from employee E, departments D where E.DEP_ID = D.DEP_ID_DEP
                - ex. select E.EMP_ID, D.DEP_ID_DEP from employees E, departments D where E.DEP_ID = D.DEPT_ID_DEP

4. Accessing Databases using Python
