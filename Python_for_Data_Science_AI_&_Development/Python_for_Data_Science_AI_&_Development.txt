Python for Data Science, AI & Development

1. Basics
    1.1 Types: int, float, String, List, Dictionary, Bool
    1.2 Expressions and Variables
    1.3 String Operations

2. Data Structures
    2.1 Lists and Tuples
    2.2 Dictionaries
        - {"key":1, "key2":"2", "key3":[3,3,3], "key4":(4,4,4), ... }
        - keys(), values()
    2.3 Sets
        - {"elem1", "elem2", ... }
        - has an unique element
        - add(), remove(), &, issubset()

3. Programming Fundamentals
    3.1 Conditions and Branching
        3.1 Comparison Operators: ==, !=, >, <, =<, =>
        3.2 Branching: if else statement
        3.3 Logic Operators: or, and 
    3.2 Loops
        3.2.1 for loops
        3.2.2 while loops
    3.3 Functions
        3.3.1 def 
        3.3.2 len()
        3.3.3 sum()
        3.3.4 sorted(), sort()
        3.3.5 scope (global, local)
    3.4 Exception Handling
        3.4.1 try ... except ... else ... finally
    3.5 Objects and Classes
        3.5.1 Object
            - an object is an instance of a particular type
            - every object has a type, an internal representation, a set of procedures for interacting the object (methods)
        3.5.2 Methods
            - A class or type's methods are functions that every instance of that class or type provides
            - It's how you interact with the data in an object, ex. sort(), reverse()
        3.5.3 Class
            - Attributes, Methods

4. Working with Data in Python
    4.1 Reading Files with Open
        - Open a file and it should be closed at the end: ex. File = open("/resources/data/Example2.txt","w") // File.close()
        - "w": write mode (can create a file), "a": append mode, "r": read mode
        - Open with ... as then it close the file automatically without the block:
          with open("/resources/data/Example2.txt","w") as File1:
              file_stuff = File1.read()
              print(file_stuff)
        - readline(), readlines(), readlines(n) // read n characters
    4.2 Loading Data with Pandas
        - import pandas as pd
              csv_path = 'file1.csv'
              df = pd.read_csv(csv_path) // df means dataframe (dataframe is data fram consists of rows and columns)
              df.head() // read first five rows of dataframe
        - Convert dictionary to dataframe, ex. songs_frame = pd.DataFrame(songs) // songs = {'Album':['Thriller','Comedy'], 'Released':[1982,1980]}
        - Add new columns to a dataframe, ex. y = df[['Artist', 'Length']]
        - Extract unqiue elements, ex.df['Released'].unique()
        - Save as CSV, ex. df1.to_csv('new_songes.csv')
    4.3 One Dimensional Numpy
        4.3.1 Basics and Array creation
            - import numpy as np
                  a = np.array([0, 1, 2, 3, 4])
            - >> a: array([0,1,2,3,4]),  type(a): numpy.ndarray,  a.dtype: dtype('int64'),  a.size: 5,  a.ndim: 1 //dimension,  a.shape: (5,) //size of the array in each dimension
        4.3.2 Indexing and Slicing (Same to list)
        4.3.3 Basic Operations
            - Vector Addition, Substraction, Multiplication, Division
            - Addition/Substraction/Multiplication/Division with a scalar, ex. y = np.array([1,2]),  z = 2*y,  z: array([2,4])
            - Product of two numpy arrays, ex. u = np.array([1,2]), v = np.array([3,2]),  z = u*v,  z: array([3,4])
            - Dot Product, ex. u = np.array([1,2]), v = np.array([3,2]),  result = np.dot(u,v),  result: 5
        4.3.4 Universal Functions
            - mean(), ex. a = np.array([1,-1,1,-1]),  mean_a = a.mean(),  mean_a: 0
            - max(), ex. b = np.array([1,-2,3,4,5]),  max_b = b.max(),  max_b: 5
            - sin(), ex. x = np.arrapy([0, np.pi/2, np.pi]),  y = np.sin(x),  y: array([0,1,1.2e-16])
            - np.linspace(first, last, number of elements), ex. a = np.linspace(-2,2,9),  a: array([-2. , -1.5, -1. , -0.5,  0. ,  0.5,  1. ,  1.5,  2. ])
    4.4 Two Dimensional Numpy
        4.4.1 The Basics and Array Creation in 2D
            - a = [[1,2,3],[4,5,6],[7,8,9]],  b = np.array(a),  b = array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
            - b.ndim: 2,  b.shape: (3,3),  b.size: 9
        4.4.2 Indexing and Slicing in 2D
        4.4.3 Basic Operations in 2D
            - Dot Product, ex. A=np.array([[0,1,1],[1,0,1]]), B=np.array([[1,1],[1,1],[-1,1]]), C=np.dot(A,B),  C: array([[0,2],[0,2]])

5. APIs, and Data Collection
    5.1 Simple APIs
        5.1.1 What is an API?
            - API (Application Program Interface) helps to communicate between programs, ex. pandas(API) helps to communicate python with data
        5.1.2 REST API
            - REST APIs (REpresentational State Transfer APIs) are another popular type of API
            - They allow you to communicate through the internet allowing you to take advantage of resources like storage, access more data, AI algorithms, etc.
        5.1.3 Simple APIs example
            5.1.3.1 API keys and endpoints
                - API keys, it's a way to access the API, It's a unique set of characters that the API uses to identify you and authorize you
                - endpoints, An endpoint is simply the location of the service. It's used to find the API on the Internet just like a web address
            5.1.3.2 Watson Speech to Text
            5.1.3.3 Watson Translate
    5.2 REST APIs (HTTP), Webscraping
        5.2.1 HTTP Protocol
            - The HTTP protocol can be thought of as a general protocol of transferring information through the web
            - This includes many types of REST APIs. Recall that REST API’s function by sending a request, and the request is communicated via HTTP message
            - The HTTP message usually contains a JSON file
            5.2.1.1 URL (Uniform Resource Locator) is the most popular way to find resources on the web
                - Scheme: the protocol, ex. http://
                - Internet address or Base URL, this will be used to find the location; ex. www.ibm.com
                - Route: this is the location on the web server; ex.  /images/IDSNlogo.png
            5.2.1.2 Request in python
                - import request
                  url = 'https://www.ibm.com/'
                  r = request.get(url)
                - then we can check, >> r.status_code: 200, r.request.headers: ~~, r.request.body, r.encoding, r.text[0:100], etc.
                5.2.1.2.1 Get/Post request with URL parameters
                    - Get request URL: http://httpbin.org/get?name=Joseph&ID=123
                    - Post request URL: http://httpbin.org/post
        5.2.2 HTML for Webscraping
            - HTML (HyperText Markup Language) is the standard markup language for documents designed to be displayed in a web browser
             , *a markup language is a system for annotating a document in a way that is visually distinguishable from the content.
            5.2.2.1 Review the HTML of a basic web page
            5.2.2.2 Composition of an HTML Tag
                - In HTML <~~> angle brackets and its contents are tags
                - ex. <html> ~ <head> ~~ </head> <body> ~~~ </body> ~ </html>
            5.2.2.3 HTML Trees
                - below structure is html tree like nested tags
                <!DOCTYPE html>
                <html>
                    <head>
                        <title>Page Title</title>
                    </head>
                    <body>
                        <h3>    <b  id='boldest'>  Lebron James</b></h3>
                        <p> Salary:  $  92,000,000 </p>
                        <h3> Stephen Curry</h3>
                        <p> Salary:  $  85,000,000 </p>
                    </body>
                </html>
            5.2.2.4 HTML Tables
                - below codes representing html table
                <table >
                    <tr> //table row
                        <td>Name</td>
                        <td>Age</td>
                        <td>Salary</td>
                    </tr>
                    <tr>
                        <td>Steeve</td>
                        <td>17</td>
                        <td> $ 10,000</td>
                    </tr>
                    <tr>
                        <td>Nancy</td>
                        <td>17</td>
                        <td> $ 7,000</td>
                    </tr>
                </html>
            5.2.2.5 Webscraping
                5.2.2.5.1 What is Webscraping
                    - Webscraping is a process that can be used to automatically extract information from a website
                5.2.2.5.2 Beautiful Soup Objects
                    - We need a little Python code and the help of two modules named Requests and Beautiful Soup
                    - from bs4 import BeautifulSoup
                      html="<!DOCTYPE html><html><head><title>Page Title</title></head><body><h3><b id='boldest'> ... </b></h3> ... </body></html>"
                      soup = BeautifulSoup(html, 'html5lib')
                    - now we can extract data with soup object
                    - ex. tag_object=soup.title: <title>Page Title</title>,  tag_object=soup.h3: <h3><b id='boldest'> ... </b></h3>
                          , tag_child=tag_object.b: <b id='boldest'> ... </b>,  parent_tag=tag_child.parent: <h3><b id='boldest'> ... </b></h3>
                          , tag_object.next_sibling,  tag_child.attrs,  tag_child.string, etc.
                5.2.2.5.3 Find_all
                    - This is a filter, you can use filters to filter based on a tag’s name, it’s attributes, the text of a string, or on some combination of these
                    - table_row=table.find_all(name='tr'): [<tr><td>Name</td><td>Age</td><td>Salary</td></tr>,
                                                                        <tr><td>Steeve</td><td>17</td><td> $ 10,000</td></tr>,
                                                                        <tr><td>Nancy</td><td>17</td><td> $ 7,000</td></tr>]
    5.3 Working with different file formats (csv, xml, json, xlsx)
        - We use pandas library to read different types of files
        5.3.1 Reading CSV Files
            - import pandas as pd
              file = "FileExample.csv"
              df = pd.read_csv(file)
            - if the file doesn't  have a hearder, we can easily add a header by using dataframes, ex. df.columns = ['Name', 'Phone Number', 'Birthday']
        5.3.1 Reading JSON Files
            - import json
              with open('filesampe.json', 'r') as openfile:
                  json_object = json.load(openfile)
              print(json_object)
        5.3.1 Reading XML (extensible markup language) Files
            - import pandas as pd
              import xml.etree.ElementTree as etree
              tree = etree.parse("fileExample.xml")
              root = tree.getroot()
              ~~ extract data ~~